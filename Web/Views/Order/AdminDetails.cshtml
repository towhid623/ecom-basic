@model Entities.Models.Order
@{
    ViewBag.Title = "Order Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int i = 1;
}

<style>
    .mb-10{
        margin-bottom:10px;
    }

    .button.button-small {
        height: 30px;
        line-height: 30px;
        padding: 0px 10px;
    }

    td input[type=text],
    td select {
        width: 100%;
        height: 30px;
        margin: 0;
        padding: 2px 8px;
    }

    /*th:last-child {
        text-align: right;
    }

    td:last-child {
        text-align: right;
    }*/

    td:last-child .button {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 0px;
        margin-bottom: 0px;
        margin-right: 5px;
        background-color: #FFF;
    }

        td:last-child .button .fa {
            line-height: 30px;
            width: 30px;
        }
</style>
<div class="row">
    <div class="col-sm-4 mb-10">
        INVOICE #@Model.OrderNo
    </div>
    <div class="col-sm-4 mb-10">
        Customer: @Model.Customer.CustomerName
    </div>
    <div class="col-sm-4 mb-10">
        Mobile Number: @Model.Customer.MobileNumber
    </div>
</div>
<div class="row">
    <div class="col-sm-4 mb-10">
        Email Address: @Model.Customer.EmalAddress
    </div>
    <div class="col-sm-4 mb-10">
        Address: @Model.Customer.Address
    </div>
    <div class="col-sm-4 mb-10">
        No Of Items: @Model.OrderItem.Count
    </div>
</div>
<div class="row">
    <div class="col-sm-4 mb-10">
        Total Price: @Model.OrderItem.Sum(s => s.Total)
    </div>
    <div class="col-sm-4 mb-10">
    </div>
    <div class="col-sm-4 mb-10">
    </div>
</div>
<h4 class="text-center">Item List</h4>
<div class="card-custom">
    <table class="table table-bordered" id="editableTable">
        <thead>
            <tr>
                <th>Item ID</th>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Rate</th>
                <th>Total</th>
                @*<th>Action</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.OrderItem)
            {
                <tr data-id="@i">
                    <td data-field="code">@item.Product.ProductCode</td>
                    <td data-field="name">@item.Product.ProductName</td>
                    <td data-field="quantity">@item.Quantity</td>
                    <td data-field="rate">@item.Rate</td>
                    <td data-field="total">@item.Total</td>
                    @*<td>
                            <a class="button button-small edit" title="Edit">
                                <i class="fa fa-pencil"></i>
                            </a>

                            <a class="button button-small edit" title="Delete">
                                <i class="fa fa-trash"></i>
                            </a>
                        </td>*@
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4" class="text-center">Total</td>
                <td>@Model.OrderItem.Sum(s => s.Total)</td>
            </tr>
        </tfoot>
    </table>
</div>

@section scripts{
    <script>
    var successMsg = '@TempData["SuccessMsg"]';
    var failedMsg = '@TempData["FailedMsg"]';
    $(document).ready(function () {
        if (successMsg != null && successMsg != "" && typeof successMsg != "undefined") {
            alert(successMsg);
        }
        if (failedMsg != null && failedMsg != "" && typeof failedMsg != "undefined") {
            alert(failedMsg);
        }
        (function ($, window, document, undefined) {
            var pluginName = "editable",
                defaults = {
                    keyboard: true,
                    dblclick: true,
                    button: true,
                    buttonSelector: ".edit",
                    maintainWidth: true,
                    dropdowns: {},
                    edit: function () { },
                    save: function () { },
                    cancel: function () { }
                };

            function editable(element, options) {
                this.element = element;
                this.options = $.extend({}, defaults, options);

                this._defaults = defaults;
                this._name = pluginName;

                this.init();
            }

            editable.prototype = {
                init: function () {
                    this.editing = false;

                    if (this.options.dblclick) {
                        $(this.element)
                            .css('cursor', 'pointer')
                            .bind('dblclick', this.toggle.bind(this));
                    }

                    if (this.options.button) {
                        $(this.options.buttonSelector, this.element)
                            .bind('click', this.toggle.bind(this));
                    }
                },

                toggle: function (e) {
                    e.preventDefault();

                    this.editing = !this.editing;

                    if (this.editing) {
                        this.edit();
                    } else {
                        this.save();
                    }
                },

                edit: function () {
                    var instance = this,
                        values = {};

                    $('td[data-field]', this.element).each(function () {
                        var input,
                            field = $(this).data('field'),
                            value = $(this).text(),
                            width = $(this).width();

                        values[field] = value;

                        $(this).empty();

                        if (instance.options.maintainWidth) {
                            $(this).width(width);
                        }

                        if (field in instance.options.dropdowns) {
                            input = $('<select></select>');

                            for (var i = 0; i < instance.options.dropdowns[field].length; i++) {
                                $('<option></option>')
                                    .text(instance.options.dropdowns[field][i])
                                    .appendTo(input);
                            };

                            input.val(value)
                                .data('old-value', value)
                                .dblclick(instance._captureEvent);
                        } else {
                            input = $('<input type="text" />')
                                .val(value)
                                .data('old-value', value)
                                .dblclick(instance._captureEvent);
                        }

                        input.appendTo(this);

                        if (instance.options.keyboard) {
                            input.keydown(instance._captureKey.bind(instance));
                        }
                    });

                    this.options.edit.bind(this.element)(values);
                },

                save: function () {
                    var instance = this,
                        values = {};

                    $('td[data-field]', this.element).each(function () {
                        var value = $(':input', this).val();

                        values[$(this).data('field')] = value;

                        $(this).empty()
                            .text(value);
                    });

                    this.options.save.bind(this.element)(values);
                },

                cancel: function () {
                    var instance = this,
                        values = {};

                    $('td[data-field]', this.element).each(function () {
                        var value = $(':input', this).data('old-value');

                        values[$(this).data('field')] = value;

                        $(this).empty()
                            .text(value);
                    });

                    this.options.cancel.bind(this.element)(values);
                },

                _captureEvent: function (e) {
                    e.stopPropagation();
                },

                _captureKey: function (e) {
                    if (e.which === 13) {
                        this.editing = false;
                        this.save();
                    } else if (e.which === 27) {
                        this.editing = false;
                        this.cancel();
                    }
                }
            };

            $.fn[pluginName] = function (options) {
                return this.each(function () {
                    if (!$.data(this, "plugin_" + pluginName)) {
                        $.data(this, "plugin_" + pluginName,
                            new editable(this, options));
                    }
                });
            };

        })(jQuery, window, document);

        editTable();

        //custome editable starts
        function editTable() {

            $(function () {
                var pickers = {};

                $('table tr').editable({
                    dropdowns: {
                        sex: ['Male', 'Female']
                    },
                    edit: function (values) {
                        $(".edit i", this)
                            .removeClass('fa-pencil')
                            .addClass('fa-save')
                            .attr('title', 'Save');

                        pickers[this] = new Pikaday({
                            field: $("td[data-field=birthday] input", this)[0],
                            format: 'MMM D, YYYY'
                        });
                    },
                    save: function (values) {
                        $(".edit i", this)
                            .removeClass('fa-save')
                            .addClass('fa-pencil')
                            .attr('title', 'Edit');

                        if (this in pickers) {
                            pickers[this].destroy();
                            delete pickers[this];
                        }
                    },
                    cancel: function (values) {
                        $(".edit i", this)
                            .removeClass('fa-save')
                            .addClass('fa-pencil')
                            .attr('title', 'Edit');

                        if (this in pickers) {
                            pickers[this].destroy();
                            delete pickers[this];
                        }
                    }
                });
            });

        }

        $(".add-row").click(function () {
            $("#editableTable").find("tbody tr:first").before("<tr><td data-field='name'></td><td data-field='name'></td><td data-field='name'></td><td data-field='name'></td><td><a class='button button-small edit' title='Edit'><i class='fa fa-pencil'></i></a> <a class='button button-small' title='Delete'><i class='fa fa-trash'></i></a></td></tr>");
            editTable();
            setTimeout(function () {
                $("#editableTable").find("tbody tr:first td:last a[title='Edit']").click();
            }, 200);

            setTimeout(function () {
                $("#editableTable").find("tbody tr:first td:first input[type='text']").focus();
            }, 300);

            $("#editableTable").find("a[title='Delete']").unbind('click').click(function (e) {
                $(this).closest("tr").remove();
            });

        });

        function myFunction() {

        }

        $("#editableTable").find("a[title='Delete']").click(function (e) {
            var x;
            if (confirm("Are you sure you want to delete entire row?") == true) {
                $(this).closest("tr").remove();
            } else {

            }
        });

    });
    </script>
}



